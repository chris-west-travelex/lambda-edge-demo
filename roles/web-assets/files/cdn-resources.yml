---
# CDN Resources
# =============
#
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Create CDN, S3 and Lambda resources.
Parameters:
  Environment:
    Type: String
    Description: >
      The name of the environment that these resources are being created for,
      e.g. "demo".
  PriceClass:
    Type: String
    Description: >
      The CloudFront price class, e.g. PriceClass_100.
  OriginAccessIdentityId:
    Type: String
    Description: >
      The ID from the CloudFront OAI that is used to authenticate this
      CloudFront distribution with its S3 origin.
  OriginAccessIdentityCanonicalUser:
    Type: String
    Description: >
      The CanonicalUser from the CloudFront OAI that is used to authenticate
      this CloudFront distribution with its S3 origin.
  DomainName:
    Type: String
    Description: >
      The domain name to use for the CDN distribution.
  Certificate:
    Type: String
    Description: >
      The ARN of the CDN's SSL/TLS certificate.
  HPKPHeader:
    Type: String
    Description: >
      The complete value of the HPKP header to set on responses. Beware!
      Setting this incorrectly will cause HPKP suicide and take your site off
      the internet for up to six months.
  CSPHeader:
    Type: String
    Description: >
      The content security policy for resources in CloudFront.
Resources:
  CDNLambda:
    # Lambda function for adding secure headers
    # NB. the runtime and association will be set via Ansible once the
    #     template has been applied.
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub >
          'use strict';
          exports.handler = (event, context, callback) => {
            const response = event.Records[0].cf.response;
            const headers = response.headers;
            headers['Strict-Transport-Security'] = "max-age=31536000; includeSubdomains; preload";
            headers['Public-Key-Pins']           = '${HPKPHeader}';
            headers['X-Content-Type-Options']    = "nosniff";
            headers['X-Frame-Options']           = "DENY";
            headers['X-XSS-Protection']          = "1; mode=block";
            headers['Referrer-Policy']           = "same-origin";
            headers['Content-Security-Policy']   = "${CSPHeader}";
            headers['Expect-CT']                 = "enforce; max-age=31536000;";
            callback(null, response);
          };
      Description: !Sub >
        Secure headers for the ${Environment} CDN
      Handler: index.handler
      Role: !GetAtt CDNLambdaRole.Arn
      Runtime: nodejs6.10

  CDNLambdaResourcePolicy:
    # Resource policy to allow CloudFront to call this lambda
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:GetFunction"
      FunctionName: !Ref CDNLambda
      Principal: edgelambda.amazonaws.com

  CDNLambdaRole:
    # Execution role for the Lambda@Edge function
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  CDN:
    # CloudFront distribution for the site
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub "${Environment}-s3"
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Logging:
          Bucket: !Sub "${CDNLogs}.s3.amazonaws.com"
          Prefix: "cloudfront/"
        Origins:
          - DomainName: !GetAtt CDNAssets.DomainName
            Id: !Sub "${Environment}-s3"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentityId}"
        PriceClass: !Ref PriceClass
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only

  CDNAssets:
    # S3 bucket for storing the CDN web assets (e.g. HTML, CSS)
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: BucketOwnerFullControl
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: ["GET", "HEAD"]
            AllowedOrigins: ["*"]
      LoggingConfiguration:
        DestinationBucketName: !Ref CDNLogs
        LogFilePrefix: "s3/"

  CDNAssetsAccessPolicy:
    # S3 bucket policy to permit CloudFront to access its assets
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref CDNAssets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: allowCDN
            Effect: Allow
            Principal:
              CanonicalUser: !Ref OriginAccessIdentityCanonicalUser
            Action:
              - "s3:GetObject*"
            Resource:
              - !Sub "arn:aws:s3:::${CDNAssets}/*"

  CDNLogs:
    # S3 bucket for storing access logs for CloudFront and the assets
    # themselves.
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite

  CDNLogsAccessPolicy:
    # S3 bucket policy to prevent tampering with logs
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref CDNLogs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: denyDeleteLogs
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:DeleteObject*"
            Resource:
              - !Sub "arn:aws:s3:::${CDNLogs}/*"
          - Sid: denyDeleteLifecycle
            Effect: Deny
            Principal: "*"
            Action:
              - "s3:PutLifecycleConfiguration"
            Resource:
              - !Sub "arn:aws:s3:::${CDNLogs}"

Outputs:
  CDNLambda:
    Description: >
      ARN of the Lambda@Edge function (so that we can fix its runtime)
    Value: !GetAtt CDNLambda.Arn
  CDNId:
    Description: >
      Id of the CDN
    Value: !Ref CDN
